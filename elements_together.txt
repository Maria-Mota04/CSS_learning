COLORS: -> I can move the top bar, to choose form rgba,hsl ,#,  and the right bar for the alpha parameter = transparency

    background-color: changes the whole background color, #six digits, rgba(0,0,0,transparent = 0), rgb(NOT INHERITED)
    color: font color, #RRGGBB, first two red etc, if R=R, G=G, B=B, #FF0000 = #F00(NOT INHERITED)
    L> I can also have hsl(hue saturation lightness) and hsla (100% = white), hue = which color it is(color wheel from 0 to 360), 
        saturation = intensity of the color I have(between full color and grey), lightness = how light or dark



FONT:(EVERYTHING INHERITED)

    font-weight: boldness
        L> normal, bold, lighter, bolder, [1,1000](default is 400)

    font-style: italic, oblique(stronger italic)(optional xdeg), normal

    font-family:prioritized list of one or more font family names
        It can have a family name and a generic family name or just the generic
        L> main ones-> serif(default in papers), sans-serif(default in web), monospace,
        |                    cursive, fantasy(really bold) -> usually used as fallbacks
        |
        (if the name has a space it need '')
        L> I can also load from google fonts -> You can put a link(top of html) or an import(copy without
        the script and add to css)

    font-size (always use rems, remember forms wont inherit)
    font: font-size, font-family



    Opacity: degree to which content behind an element is hidden
   


TEXT:   
    text-overflow: sets how hidden overflow content is signaled to users.(NOT INHERITED)
        L> clip - can clip in the middle of a letter(to only clip between characters text-overflow: "")
        L> ellipsis
        L> string

    text-shadow:  adds shadows to text. (INHERITED)
        L> x,y, blur radius, color

    writing-mode:  whether lines of text are laid out horizontally or vertically,
                 as well as the direction in which blocks progress.

            L> horizontal-tb, vertical-rl, vertical,lr

    text-orientation: sets the orientation of the text characters in a line. 
                only affects text in vertical mode (when writing-mode is not horizontal-tb)


    text-underline-offset: offset distance of an underline text decoration line

    text-decoration: sets the appearance of decorative lines on text (NOT INHERITED)
        L> line(underline, line-through,...), color, style(solid,wavy,dashed...), thickness
        L> none to remove, usefull for links

    text-transform: specifies how to capitalize an element's text. (INHERTED)
        L> none, capitalize(first letter of each word upper), uppercase, lowercase,
         full_width(chinese, japanese, cause characters take more space),
          full-size-kana( all small Kana characters to the equivalent full-size Kana)

    text-align: sets the horizontal alignment of the inline-level content inside a block element or table-cell box. (INHERITED)
        L> works like vertical align but in horizontal
        L> start == left, end == right, left, right, center, justify,
         justify-all(same as justify but forces the last line to justify), match-parent -> assuming direction: ltr;

    text-indent: (GOOD FOR EM): indents the first line (INHERITED)

    line-height: number | length | percentage | normal, distance between lines (INHERITED)
        L> default 1.2, should not have units

    letter-spacing: spacing between text-chars (INHERITED)
        L> px, rem, normal... (better to use em's)
    
    word-spacing: same as last, but for words (INHERITED)

    white-space: how white space inside an element is handled.(INHERITED)
        L> normal(multiple spaces collapsed, same as newlines, text make to fill the box), 
            nowrap(same but no newlines, if there is a linebreak, the name with space wont break),
                |             pre(newline and spaces preserved, text wont wrap, it can overflow, good for poems),
                L>when I dont want text to separate
            pre-wrap(same as pre, but will break lines to fill boxes, unless its spaces),
            pre-line(same as pre-wraped but collapses sequences of white spaces),
            break-spaces(SIMILAR TO PRE-WRAP,preserves whitespaces, wraps, can break spaces if needed to fill box)

    NOTE: ---> IF I DONT WANT A NAME TO BREAK I DO FIRSTNAME <SPAN class = "nowrap">LAST NAME WITH SPACE</SPAN>


AROUND LINE:

    border: width, style, color EX:  thick double #32a1ce; there are also sides like the bellow ones (NOT INHERITED)
    outline: width, style, color EX: 3px solid green; -> DONT TAKE UP SPACE INSIDE, GOES OUTSIDE,!= BORDER(NOT INHERITED)
        L> I can also have an outline - offset, that gives me a distance of the line from our box,
        I can use negative values to get inside the box

    border-radius: only works with square images - 50% is a circle
        L>top-left, top-right, bottom-right, bottom-left

    box-shadow: X and Y offsets relative to the element, blur and spread radius, and color.




AROUND SPACE:


    padding: top, right, bottom, left == top bottom, left right == top, right left, bottom; if its a percentage -> relative to inline size 
    L> creates extra space within an element.(NOT INHERITED)
    margin: same as padding -> Margins create extra space around an element != padding (NOT INHERITED)
    margin-inline - > only applies to left and right (there exists margin collapsin when 2 margins overlap)

    NOTE -> DOING MARGIN: x px AUTO, the auto centers the box




LISTS -> I can add to the html start(to start the count at a certain number), reversed(to count down),




    ORDERED LIST:
        list-style-type:  sets the marker (INHERITED)
            L> disc, circle, square...., "-",  custom-counter-style(Identifier matching an @counter-style rule )
                none

        list-style: allows you to set all the list style properties at once.(INHERITED)
            L> image, position, type

        list-style-position: sets the position of the ::marker relative to a list item.
            L> inside(indented and the marker is inside, if I add padding the markers will move with it),
             outside (same level and the marker is ouside)
            L> List 1                   List 2
                -List Item 1-1      vs -List Item 2-1

            L> if I move the text and i want the bullet points to move i should change it to inside



COLUMNS - no flexbox or grid (NOT INHERITED )


    columns: ets the number of columns to use when drawing an element's contents,
    as well as those columns' widths.
    L> column-count, column-width

    column-count: ideal number of columns into which the element's, may not be this
    content should be flowed, defined as an <integer> or the keyword auto.
     (if nothing is set -> it puts max of the allowed collumns)

    columns-width: ideal column width,  the actual may be different

    column-gap: size bwteen cols -> normal or size

    column-rule-width: width of the line between columns  
        L> thing, medium, thick, or actual size

    columns-rule - >width, style, and color of the line drawn between columns in a multi-column layout.

    column-span: makes an element go across all collumns, when set to all

    column-fill: how content is divided
        L> auto or balance(equally divided)

    NOTE:   -to not have containers break in half we should use break-inside: avoid
            -and if I want to make a collumn in a container mandator: break-before: column -> if one 
             column it has a problem



img(NOT INHERITED)
    responsive image is an image that had width a % and height auto
    image should be inside a figure element

    I should add, before background-image a fallback color
        ----->NOTE GO TO WEBKIT TEXT-FILL

    background-image: one or more background images
        L> url -  i can overlap them
        L>linear-gradient - creates an image consisting of a progressive transition between 
                            two or more colors along a straight line.
                            L> direction - can be an angle or to bottom, to top...
                            L>color transitions with percentages ex: blue 50%
                            L>...

        L>radial-gradient - olor transition radiating outward from a central point,
            L> args: (SHAPE SIZE at POSITION, colors...)
            L> shape: circle or ellipse
            L> size: (size of the ending shape of the gradient) - closest-size,...
            L>position: (starting point of gradient) - center, top, 50% 50%, ...

    background-clip: SHOULD BE USED WITH WEBKIT AND MOZ FOR SUPPORTING PLATFORMS

        whether an element's background extends underneath its border box, padding box, or content box.    
        L> border-box- background extends outside the edge of the border, but under, no overflow
        L> padding-box - extends into the padding, but not into the border, no overflow
        L> content-box - background inside the content box, will not automatically stretch
        L> text - background is painted to the text


    WEBKIT:   for google/safari - Same for moz(firefox) - shouldnt be used not supported
        
        L> THERE ARE WAY MORE STYLES GO TO REFERENCE
        L> text-fill: color of text- can be transparent TO PAIR WITH LINEAR GRADIENT
        L> background-clip: same as last
                L> if its text, I can down the colors transparency and i can see the image under

        -SCROLLBAR
        L>-scrollbar,-scrollbar-thumb, -scrollbar-track, -scrollbar-button(arrow at the ends), 
                -scrollbar-corner(intersection of vertical and horizontal scrollbars)

    
    SCROLLBAR:
    scrollbar-width:  thickness of the scrollbar.
        L> auto, thin, none

    scrollbar-color: scrollbar's track and thumb.
        L> thumb-color, track-color
        L> auto

    scrollbar-gutter: Reserves space for a scrollbar, even if it's not present, to prevent layout shifts.
        L>atuo, stable, both-edges(space for horizontal and vertical)

        RELATED:

        overflow: visible(content not clipped, overflows),
                 hidden(content clipped and not scrollable),
                  scroll(scrollbars added)
                   auto(same as last but only in need)

        scroll-behaviour: auto(instant), smooth --> PUT IN HTML{}

        scroll-snap-type: sets how strictly snap points are enforced
                         on the scroll container in case there is one.

                L>none
                L> x( scroll container snaps to snap positions in its horizontal axis only.)
                L> y(same but for y)
                L> block(The scroll container snaps to snap positions in its block axis only.)
                L> inline(the scroll container snaps to snap positions in its inline axis only.)
                L> both(both axis)
                L>mandatory(visual viewport of this scroll container must snap to a
                             snap position if it isn't currently scrolled.)

                L> proximity(ay snap to a snap position if it isn't currently scrolled. 
                            The user agent decides if it snaps or not based on scroll parameters.)

        scroll-snap-position: specifies the box's snap position as an alignment of its snap area 
                L>none, center, start, end

        scroll-margin-top: When you apply this to an element, say, a heading, if you click on a link that anchors to this heading, 
        there will be a x space between the top of the viewport and the heading.

        scroll-timeline: a named scroll progress timeline, which 
                        is progressed through by scrolling a scrollable element
                         (scroller) between top and bottom (or left and right). 

                L>scroll-timeline-name- none or costum
                L>scroll-timeline-axis- pecify the scrollbar direction that will be used to provide the timeline for a named scroll progress timeline animation, 

                        L> block- perpendicular to flow text
                        L> inline- horizontal to flow text
                        L> x, y

        scroll-margin, scroll-padding






        


    background-origin: 
        from the border start, inside the border, or inside the padding.
        L>border-box: image starts from the outer edge border
        L> padding-box: image starts from the outer edge padding, excluding the border
        L> content-box: image starts from the content edge, excluding the padding/border

    background-repeat:  how background images are repeated.
                         can be repeated along the horizontal and vertical axes, or not repeated at all.

                L> repeat-x (repeats horizontally, can cause clipping)
                L>repeat-y (same but vertically)
                L> repeat(default, repeated as many times to fill, may be cropped)
                L>space(repeated as much without clipping, first and last
                                 glued to the sides and even whitespace between images)

                L>round(image repeated without clipping, when container stretches,
                             image will stretch until I have space for one more image)
                L>no-repeat(not repeated, image where background-origin tells)

    background-size: size of the element's background image. 
        L>cover - scales the image(keeping ratio) to the smallest size to fill the container, leaves no empty space
                    L> may crop image, resizes when I change the containers size

        L>contain - sizes up image without stretching or cropping, if container larger, it will cause repeat
        L> %,em,rem,px (width only height is auto)
        L> auto
        L> if i set two values is width and height
        L> FOR MORE THAN ONE BACKGROUND -> auto, auto != auto auto; or 50%, 25%, 25% etc

    background-position: sets the initial position for each background image.
                         ( position is relative to the position layer set by background-origin.)

                L>top, left, center, bottom, right
                L> 25% 75%...

    background-attatchment: sets whether a background image's position is fixed within the viewport, 
                                or scrolls with its containing block.

                L> scroll - background fixed relative to the element and doesnt scroll with the content, nothing moves
                L> fixed - background is fixed realtive to the viewport, even if the element has a scroling mechanism
                L> local - background fixed relative to the elements contents 
                            L> if element has scrolling mechanism - background scrolls with it
                                L>  and the background painting area and
                                         background positioning area are relative to the scrollable area of the element

    background-blend-mode: sets how an element's background images should blend 
                        with each other and with the element's background color.


    NOTE: 
        background image by default repeats, If i dont want that i need o explicitly say it

        If i want to filter an image, add a container and add a background-color with transparency

        I CAN HAVE A LINEAR GRADIENT AND AN IMAGE AND THEY OVERLAP

        IF i have 2 images and I want to style, ex: repeat, I can do repeat-y, norepeat 

        IF I DO BACKGROUND-SIZE: 100%, IT WILL PUT THE WHOLE THING






MULTI:

    background: color, image, origin, size, repeat-method, attachment, clip, position

SIZE:
    box-sizing: sets how the total width and height of an element is calculated
                1- content-box -  default, is i say box = 100px, it will add border and padding, so it will be bigger   
                2- border-box - best one, if i say box = 100px, it will account the border and padding (use in css reset)
                    L> doesnt include margin cause that is outside or outline


CURSOR
    changes the way the mouse appears when we hover
    L> auto; pointer; zoom-out;    url(hand.cur), pointer;     url(cursor_1.png) 4 12,auto;
        url(cursor_2.png) 2 2,pointer; ...

    L>cursor property is specified as zero or more <url> values, separated by commas, 
    followed by a single mandatory keyword value. Each <url> should point to an image file. 

    Parameters:
    L> URL - more than one url ->provided as fallbacks, in case some cursor image types are not supported.

    L>coordinates -  relate to the top-left corner of the image - cursor's hotspot

    L> Keys(mandatory)
        L> general - auto(automatic), default(normal cursor), none
        L> links - context-menu, help, pointer, progress, wait
        L> selection - cell, crosshair, text, vertical-text
        L> ...


CONTENT(NOT INHERITED)
    insert text, symbol, image without altering html- usually for pseudo-elements

    p::before {content: "★ ";} -> inserts before every paragraph the start
    p::after -> this is after
    p{...} -> replaces p for what I put in content

    content: none ->hides the pseudo-element, 
    content: normal-> allows the pseudo-element to be generated but doesnt display anything(reset)

    content: linear-gradient- to add it to the pseudo-element
    content: open-quote, close-quote, no-open-quote,no-close-quote (to add quotes to a text)

    background: image-set( url("image1x.png") 1x, url("image2x.png") 2x); /* Different images for different pixel densities, different resolutions */
    ....





DISPLAY:(NOT INHERITED) -> sets whether an element is treated as a block or inline box 
                        and the layout used for its children, such as flow layout, grid or flex

    FOR THE ELEMENT/OUTER:

        BLOCK - > 100% width default, and stack ontop of eachother(newline), and default margin
                    can control the overflow if the element exceeds overflow: visible/hidden/scroll/auto
                    can contain block and inline elements, respect margin, padding and border
                    (ex: p, div, h1, ul, ol, section, article, header, footer, form)

        INLINE - > only as much width as necessary, dont start newlines,
                container only other inline elements or text, DO NOT RESPECT WIDTH, HEIGHT,
                MARGIN-TOP, MARGIN-BOTTOM, PADDING-TOP, PADDING-BOTTOM
                ----> THEY TAKE THE SPACE THEY NEED, bu respect horizontal margin and padding.
                vertical align can be controlled with vertical-align.
                respect whitespaces
                (ex: span, a, em, strong, img, input, label, code, abbr, cite, q)
                

        INLINE-BLOCK -> similar to inline, no newline, width as needed, vertical align can be controlled 
                        with vertical-align, respect whitespaces
                    -> similar to block, respects width and height, respect padding and margins, 
                    can contain block and inline
                    (ex: img, input, button, label )
                    (ex: can be made inline-block: span, a, div, li)

                    USEFUL - turning link into a button and turning a list into a row

        NONE -> items disappear, removes from the document flow (bad)


        EXTRAS:

            CONTENTS: the element will disappear and its children will be rendered as if they
                    are put directly under their "grandparent"- SO THE ELEMENT ITSELF WONT TAKE SPACE

            BLOCK FLOW-ROOT: block level element + new formatting context
            (preventing floated children escaping parents container)

            INLINE FLOW-ROOT: same but inline

            INLINE-FLEX: will behave like inline, but children will be FLEX

            INLINE-GRID: same but with GRID

            TABLE-ROW: element like a row in a table

            LIST-ITEM: to behave like a list item, for fake lists




    FOR THE CHILDREN/INNER:

        FLOW_ROOT -> creates a new block-formatting context, 
            isolates the elements from floats or margin collapsing. (preventing floated children escaping parents container)


        TABLE -> element as block level container -  to simulate a table

        FLEX -> 

                ELEMENT: 

                    layout of items in one dimension

                    Children can be laid out in any direction
                    can flex their sizes(to fill or to shrink)
                    Horizontal and vertical alignment easily manipulated

                    its a block level container(we can have inline flex that is the same but for inlines)

                    - align-content (how multiple lines are spaced)-  distribution of space between and around content items using the cross axis
                        L> start, end - depends on the flex-direction, reference is cross axis
                        L> self-start, self-end - same as last but reference is also the parent container
                        L> flex-start, flex-end - same as start, end, but if direction is row-reverse,
                                                flex-start is right and flex-end is left (opposite for start, end)

                        L> baseline - aligns at the invisible line where caracters sit, across different rows, for multiple lines is the end
                                    aligns the rows (different from align-items)
                            L> first/last baseline -same but the baseline is at the start or end of the cross axis

                        L> stretch
                        L> space - 
                                L> between - spacing between them - vertical- ITEMS FLUSHED TO THE SIDES OF THE CONTAINERS
                                L> around - spacing is the same around, EXPECT AT THE START AND END != LAST
                                L> evenly -  items evenly distributed across the container, BETWEEN THE ITEMS
                                                                    AND END AND BEGINNING SAME SPACE
                        L> safe ____ (fill) -  prevents clipping or overflow
                        L> unsafe____(fill) - allows aligment to clip or overflow


                    - align- items(single row, ONLY DEALS EACH THING AS A SINGLE ROW, the space between lines remains) - sets align-self to the children
                        L> same as last, without space around and space between and such cause its just one row

                    - flex-direction - row, row-reverse, column, column-reverse (column changes the cross axis to horizontal- for aligments)
                                        L> items in a line, but the way they align(cross-axis) is vertical

                    - flex-flow - flex-direction and flex-wrap
                        L> flex-wrap - nowrap(CAN OVERFLOW), wrap, wrap-reverse

                    -flex-grow - specifies how much of the flex container's positive free space,
                                     should be assigned to the flex item's main size.

                                -> flex-grow: 1 extends to the full visible page

                    - justify-content - distribution of space around items , along main axis(same as align but horizontal)

                    - gap(spacing) - space between columns

                CHILDREN:
                -  align-self: overrides align-items (using cross axis)
                    - order: order within container
                    -flex- grow and shrink are specifying how they should behave when the size of the container changes
                    
                        L> flex-grow - how much size, compared to others it should take up in the container,
                                                    after the flex-basis, not counting it ( so value 2 might not be double)
                                                    as I change the image size, it affects it too
                        L> flex-shrink - same but reverse 
                        L> flex-basis - initial main size of a flex item
                        

                NOTES: 
                    - cross-axis: perpendicular to the main axis, vertical(so flex-direction: row is vertical)
                    - SO BY DEFAULT: ALIGN-CONTENT(VERTICAL), JUSTIFY-CONTENT(HORIZONTAL)
                    - FLEX ITEMS OVERFLOW SHOULD WRAP
                    - shrink and grow lets us go beyond the basis

        GRID ->
                    two-dimensional != FLEXBOX CAUSE IT WORKS WITH ROWS AND COLS AT THE SAME TIME

                        - set of intersecting horizontal and vertical lines defining columns and rows.
                        Elements can be placed onto the grid within these column and row lines.

                        Grid Container: Apply display: grid or display: inline-grid to an element to turn it into a grid container.
                                        All its direct children become grid items.

                        Track Sizes: You can set fixed track sizes (like pixels) or flexible sizes (like percentages or fr units) for the rows and columns.

                        Item Placement: Place grid items using line numbers, names, or by defining areas. The grid layout can automatically position items as well.

                        Flexible Layouts: Additional rows or columns can be automatically created as needed, allowing for responsive designs.

                        Alignment and Overlapping: Control how items are aligned within the grid, and manage overlapping content using properties like z-index.

                        ELEMENT:
                                - grid-auto-flow: auto-placement
                                        L> row(default, putting items in the necessary rows),
                                        column, row dense(doesnt let there be gaps, so may change the order), column dense

                                - grid-template-: for more control than the last
                                        L> -columns: defines the line names and track sizing functions
                                                ex: 200px 100px 200px (width of each cols, there are 3,
                                                                        if i need more they will be wrapped)
                                                ex: 2fr 1fr 1fr(the first col is 2 times the last two)
                                                ex: 200px 1fr 1fr (first will be 100px, and the rest will divide)

                                                ex: repeat(4,1) (4 cols with fraction 1)
                                                ex: repeat(2, 1fr 2 fr) (this will repeat twice, but I defined 2 cols)
                                                L> I CAN PROVIDE A LINE NAME BEHIND EACH number

                                                ex: minmax(100px, 1fr) - defined one col at least 100px, but can grow to take up any remaining space
                                                                                    L> if there are 4 cols, 1fr is 1/4

                                                ex: fit-content(40%) - this col will grow to git its content but will never go over 40% of grid width
                                                ex: sub-grid - grid item inherits structure of parent, it will align the items with the grid lines of the parent
                                                ex: masonry - automatically aranjes items to fill the gaps

                                                ex: grid-column-end: span 2;//takes 2 cols

                                        L>-rows: same but for rows
                                        L>-areas:

                                - row/col-gap 
                                - gap = row-gap col-gap
                                - justify-content-row axis, align-items(aligns items within their grid area, column axis),
                                        align-content(aligns entire grid column axis)
                                - justify-items - aligns grid items within their row axis
                                - place-items
                                    L> align-items, justify-items
                                - place-content - same but for content

                        CHILDREN:
                            - grid-column-start and grid-column-end: will define how manu columns the child will take
                                L> can also take start and span number

                            -grid-row -same

                            -grid-area - row-start, col-start, row-end, col-end

                            - justify-self, row axis
                            - align-self - col axis
                            -place-self- align, justify
                            -order, items with lower values, doesnt matter row or col will always come first


                            


                        AUTO VS TEMPLATE:

                            grid-template-rows:

                                Explicit Definition: Defines sizes of rows that you explicitly set.
                                Used For: Static and known number of rows and their sizes.


                            grid-auto-rows:

                                Implicit Definition: Defines sizes of rows that are created automatically when needed.
                                Used For: Dynamic content where the number of rows can vary.

                        NOTE: I CAN USE FRACTION UNITS SO I USE ALL THE AVAILABLE SPACE, BUT EACH COLS/ROW TAKES UP X FRACTION
                        I can inspect the website and go to layout to see the website grid

                        If I say grid-column-end: -1 its the first col of the right


            SUPER IMPORTANT::::
            NOTE: GRID NEEDS A FLAT STRUCTURE, SHOULDNT BE USED ON TABLES DIRECTLY, WRAP IN A DIV
                    AND THE TABLE WILL DISPLAY: GRID
                    
        RUBY -> ....







FLOAT:(NOT INHERITED)

    L> The element is removed from the normal flow of the page SO IF I APPLY MARGIN TO OTHER CONTENT IT wont
            AFFECT THE FLOATED ITEM(i should add margin to the actual block)
    L> still remaining a part of the flow

    L> places an element on the left or right side of its container,
    L> allowing text and inline elements to wrap around it. (TEXT WRAPPING)

    L> floating elements behave like blocks in layout.

    L> IF I DONT WANT OTHER CONTENT WRAPPING AROUND,
        if I have a container around it:
            I can display: flow-root(in the container I have behind it), so the container wont shrink
        
        Otherwise do: clear:both as a separate class and add it to what I want


POSTION: sets how an element is positioned in a document. (NOT INHERITED)
            The top, right, bottom, and left properties 
            determine the final location of positioned elements.

    STATIC(default) -> positioned according to the normal flow
                    L> top, right... and z-index have no effect

    RELATIVE -> according to normmal flow
            L> can offset it relative to top, right... not affecting other elements,
             they assume he is taking his original space
                    SO I CAN MOVE IT WITHOUT MOVING OTHER ELEMENTS, BUT ORIGINAL SPACE SAVED
            L> space for the element same as static
            L> z-index usable

            L>>>>> if i create this usually means ill have something absolute inside

    ABSOLUTE -> removed from the normal flow
            L> no space created for the element, SO OTHER ELEMENTS ACTS AS IF IT DID NOT EXIST
            L> position relative to the closest ancestor or initial containing block
            L> top, right... usable
            L> z-index usable
            L> margins cant be collapsed

    FIXED -> removed from the normal flow -> ex: if it was block it doesnt take 100% width anymore
            L> no space created
            L> SAME AS ABSOLUTE, BUT THE RELATIVE POSITION CHANGES
            L> position relative to initial containing block(maybe viewport)
            L> top, right,... usable
            L>s-index usable
            L> USED FOR FLOATING AN ELEMENT THAT STAYS IN THE SAME POSITION WHEN SCROLLING

    STICKY -> normal document flow
            L>SIMILAR TO FIXED, but stays in the normal flow until it reaches the position I defined
            L> position relative nearest SCROLLING ANCESTOR and containing block
            L> top,... usable, offset doesnt affect other elements
            L> z-index usable
            L> STICKS TO THE NEAREST ANCESTOR
            L> can be used for sticky lists, like alphabet with words

            L> stops being sticky when I reach the containers boundary or it becomes invisible.
                    L> remains stuck until another container passes it




    NOTE: removed from the normal document flow => doesnt affect others
        ANCESTOR - element that encloses my element -> SHOULD ALWAYS BE POSITIONED RELATIVE FOR 
                                                        ABSOLUTE, STICKY ..
                                                    -> IF ANCESTOR IS STATIC,
                                                     THEN THE ABSOLUTE CHILD WILL BE 
                                                     RELATIVE TO THE INITIAL CONTAINING BLOCK
                L> if ancestor is:
                    - relative: serves as reference point for absolute children



        INITIAL CONTAINING BLOCK: iewport or the root element

        SCROLLING ANCESTOR(STICKY): has overflow defined

        THE ORDER: the order without z-index(default = 0) is determined by the order 
        in reverse from the html stucture

        INVISIBLE CONTAINERS: I can do top: -10000px; it will still be a part of the document,
        but will be hidden




TRANSITION(NOT INHERITED)

    L> property(which property should be animated, can be any property, even transform),
     duration(how long it lasts), 

    L>timing-function(speed of the curve)- default is ease(starts slow and speeds up and slows down)
            L> linear - even pace

    L> delay(delay before it starts), 

    L> behaviour

    L> YOU MAY HAVE TO PUT TRANSITION IN THE NORMAL ELEMENT, THE PSEUDO CLASS HAS THE AFTER VALUE


    NOTE: --> YOU MAY PUT MANY SEPARATED BY ,


TRANSFORM(NOT INHERITED)
    L>lets you rotate, scale, skew, or translate an element. Modifies the coordinate space.
    L> takes one or more transform func or none
    L> if I user % it will base it on the size of the div

    L> rotateX, rotates using the x axis, if i rotateX(90deg) it disappears
    L> rotateZ works like a clock <=> rotate

    L>scaleX, stretches horizontally, if less 100%, it shrinks
    L> skew - inclinates

    L>transform-origin: sets the origin for an element's transformations.
        L> center, top left, 50 px.. (x y z)
    L> transform-style: sets whether children of an element are positioned in
                             the 3D space or are flattened in the plane of the element.

                L> flat, preserve-3d

    L> transform-box: S determines the reference box used by the transform and transform-origin properties when applying 
                    transformations like rotate, scale, skew, or translate to an element.
        L> content-box: Uses the content area of the element as the reference box. This means the transformation 
                    is applied relative to the inner area, excluding padding, borders, and margins.

        L> border-box: Uses the element's border box as the reference. 
                    This includes the content, padding, and borders.

        L> fill-box: Primarily used with SVG elements, 
            it references the area that contains the element's graphical content.

        L> view-box: Also used with SVG elements, it refers to the entire viewBox of the SVG.

FUNCTIONS:

    rgb,rbga,hsl,hsla, hex, hwb, lab, lch
    color-mix: mixes 2 colors

    transform:
        translate, translateX, translaeY, translateZ

        scale,...

        rotate, ...

        skew, skewX, skewY = inclinar

        matrix, matrix3d: applies a transformation, using a matrix of values

        perspective: adds perspective to a 3d transformed element

    filter:
        blur 
        brightness
        contrast
        drop-shadow
        gray-scale
        hue-rotate
        invert: inverts colors
        Opacity
        saturate
        sepia: adds sepia effect

    background:
        linear,radial,conic,reapeating-linear,repeating-radial ---> gradient

    clip-path(shape funcs):
        inset(defined inset triangle)
        circle
        ellipse
        polygon

    transition-timing-function
        cubix-bezier: costum timing func for animations
        steps: defines steps of animation

    url

    content: 
        attr(data): returns the value of an attribute of the item
        counter

        ex: <span class="tooltip" data-tooltip="This is Latin">Lorem</span>
            css:
            .tooltip:hover::before {
                /*now this data-tooltip(this is latin) appears before the word when I hover*/
                content: attr(data-tooltip);
                }

    
    width:
        calc: determine the value ex: 100% - 50px -> lets us mix units
        min: ex: 2.25rem, 3Vh - will be one of the smaller, 100% or 500px -> choose 
                                                                        one absolute(maximum) 
                                                                        and one variable
                                                            -> BETTER TO CHOOSE VH FOR FONTS
        max: same but for max
                -> absolute value is the smallest
                -> VH FOR FONTS

        NOTE: CLAMP IS BETTER THAN THIS

    font-size:
        clamp: set a value within a range, ex: clamp(1rem, 2vw, 2rem), the value will be 2vw
                                         but will never be smaller than 1rem or larger than 2rem

            -> (minimal, ideal, maximum)

    color:
        var: insert the value of a costum property: ex: --main-color: #3498db, var(--main-color)

    padding:
        env: acess env variables


    GRID SPECIFIC:
        minmax- provides a min and a max for the grid-template



ANIMATION:(NOT INHERITED)

    1º is naming the animation

    animation-name: ....

    2º for the animation to work WE NEED TO DEFINE KEYFRAMES
        @keyframe animationName{
            0%{ //beggining
                transform ...
            }
        }


    -name: specifies the names of one or more 
                @keyframes at-rules that describe the animation to apply to an element.

    -duration-timing-function
    -delay
    -iteration-count: sets the number of times an animation sequence should be played before stopping.
        L> CAN HAVE INFINIT

    -direction :  sets whether an animation should play forward, backward, 
                        or alternate back and forth between playing the sequence forward and backward.
        L> normal: each time it resets, goes from start to end
        L>reverse: same but end to start
        L> alternate: each time it resets, it inverts the order(start-end/end-start)
        L>alternate-reverse: same but starts end-start

    -fill-mode: how a CSS animation applies styles to its target before and after its execution.
        L> none: animation wont apply styles when its not executing
        L> forwards: target will retain values by the last keyframe from the animation
        L>backwards: same but with the first
        L>both: will extend the properties both ways

    -play-state: y sets whether an animation is running or paused.
        L> paused
        L>running

    -timeline: specifies the timeline that is used to control the progress of a CSS animation.
        1. Default Values

            none: The animation does not use any timeline, so it is effectively disabled.
            auto: Uses the default timeline, which is the document’s standard time-based timeline. This is the default behavior for CSS animations.

        2. Anonymous Timelines

            scroll(): This function provides a scroll-based timeline. It creates a timeline that progresses as you scroll through a specified scrollable element (scroller). The scrolling axis (horizontal or vertical) and the scroller are specified as arguments.

            Example: animation-timeline: scroll(left); would create a scroll-based timeline that tracks horizontal scrolling.
            view(): This function creates a timeline based on the visibility of an element within a scrollable area. It progresses as the element becomes visible and then invisible within its parent scrollable container.

            Example: animation-timeline: view(top 20px); would create a timeline based on the vertical visibility of the element with a 20px inset from the top.

        3. Named Timelines

            <dashed-ident>: Represents a named timeline that was previously defined using scroll-timeline-name or view-timeline-name.
            Example: animation-timeline: --myScrollTimeline; uses a previously defined scroll timeline with the name --myScrollTimeline.


    



BUTTONS:
    automatically come with the tab for focus mode

    should reset background-color to transparent and border to none

    titles in buttons appear when we hover

    tabindex = -1, wont have focus if someone tabs through





JS 

    if I have .menu.is-active, I can build a js function that activates the .menu and gets those styles








GLOBAL VALUES: ex

    outline: inherit; -> inherits from the parent
    outline: initial; -> resets to the initial/default value, usually none
    outline: revert; -> reverts the value of a property to what it would have been if the current stylesheet (or the current layer) didn't apply.
    outline: revert-layer; -> r essentially ignores the current cascade layer (e.g., the author stylesheet) and reverts the property to its value from the previous cascade layer.
    outline: unset; ->  Acts as inherit if the property is inheritable, otherwise acts as initial.




--------------------------------------------

UNITS FOR MEASUREMENTS:

ABSOLUTE: pixels = px -> not recomended because its static for fonts, but for borders for example is good

RELATIVE:
    - percentage: usually related to the parents size

    - REM: usually for fontsize, related to the root element

    - EM: looks for the main element, the parent for fontsize, but for padding, margin it looks for the fontsize
        SO IT LOOKS FOR THE NEAREST FONT-SIZE AND USES THAT AS REFERENCE
        -> not recomended for font, but yes for the padding, margin, button etc because it uses the element iself as reference

    -CH- character - helps determine character width - based on the character '0's width

    -VW,WH- viewport width and height - % is usually better than vw
        - vh is good to make the body element bigger without adding elements, using min-height = 100vh




-----------------------------------------
USER STYLE SHEETS

Summary

    Browser Default Styles: Basic styles applied by the browser.

    User Stylesheets: Custom styles applied by the user to override site styles.

    Author Stylesheets: Styles provided by the website developer (external, internal, and inline).

    User-Agent Stylesheets: Special fallback styles applied by the browser.

The cascade in CSS determines how these styles interact, with inline styles typically having the most power, followed by author styles, user styles, and finally browser default styles.


-------------------------------
CSS RESET- always reset

    *,
    *::before,
    *::after {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
        }
    img {
        display: block; //removes the default padding and margin
        //So it wont overflow
        max-width: 100%;
        height: auto;
        }

    /*forms dont inherit*/
    input, button textarea{
        font: inherit
    }

    Consistency: Browsers apply their own default styles, which can vary. A reset helps standardize element appearance across different browsers.

    Simplify Styling: By removing default browser styles, you can more easily control the look and feel of your web page.

    Reduce Bugs: Minimizes styling issues caused by inconsistent default browser styles.

    CSS Reset: A method to remove default browser styles for consistency and ease of styling.

------------------------------------------
CLASSES:
    if I have a container with class="name1 name2", it is 2 classes,
         if I have a whitespace it means 2 classes

-------------------------------------------
PSEUDO CLASSES - keyword added to a selector that specifies a special state of the selected element(s). 



    :nth-child(2) -> for lists, selects a buller point

    a:hover,
    a:focus-> together for people that cant selection

    a:active -> when I click

    a:visited 


    ---> ::MARKER-  selects the marker box of a list item, which typically contains a bullet or number. 
                L> fonts, white-space, color, text-combine-upright, unicode-bidi, direction, content,
                    animation, transition

    :checked: This targets an element that is currently 
            in a checked state, like a checked checkbox or radio button.

    
    :valid is used to apply 
        styles to form elements that are valid according to their validation constraints.
    :invalid, :focus-invalis




PSEUDO SELECTORS:
    
    pseudo-class(THEY USE ":"): selector that selects elements that are in a specific state   
            ex: hover, focus, visited, link, active
            different specific states

            L> INPUT:relate to form elements, and enable selecting elements based on HTML 
                        attributes and the state that the field is in before and after interaction.
                        
                L>autofill: when input has been autofilled
                L> enabled: when user interface element is enabled
                L> disabled: same but disabled
                L> read-only: when an element cant be changed by the user
                L> read-write: any user-editable
                L> placeholder-shown: input element that has placeholder
                L> default: UI elements that are default
                L>checked: when elements like checkboxes are toggled on
                L> indeterminate: UI elements in inderterminate states
                L> blank: user input empty
                L> valid: ex: email well filled
                L> invalid: opposit
                L> in-range: elements that are in range
                L> out-of-range
                L> required: when a form element is required
                L> optional: when is optional
                L> user-valid: element with correct input when user interacted with its
                L>user invalid

            L>LINGUISTIC
                L>dir()
                L> lang()

            L>LOCATION
                L> any-link: link or visited
                L> link
                L> visited
                L> local-link: absolute URL same as target URL
                L> target: element which is the target URL, last element selected
                L>target-within: elements that are targets and descendants
                L> scope: elements that are reference point for selectors

            L>RESOURCE STATE 
                L>playing
                L>paused

            L>TIME dimensional
                L> current
                L>past 
                L> future

            L> TREE STRUCTURAL
                L> root: usually html
                L> empty: element with no children other than whitespaces
                L> nth-child, nth-last-child, first-child, last-child, only-child,
                                     ---> LOOKS FOR THE HTML ORDER, DOESNT MATTER THE ORDER ATTRIBUTE
                         nth-of-type(element that match a certain type), nth-last-of-type(same but down up)
                L> first-of-type
                L>last-of-type
                L> only-of-type

            L>USER ACTION
                L>hover,active,focus-  When an element is "focused," it means that
                                     the browser is paying attention to it, and any actions you take
                L>focus-visible- style elements that receive focus, but only when it's appropriate to show a focus indicato
                L>focus-within-  applies styles to an element when it, or
                             any of its descendants (children, grandchildren, etc.), have received focus.

            L>FUNCTIONAL
                L>is(): any element that matches any of the selectors in the list provided- BE CAREFUL
                                THIS WILL UP THE SPECIFITY IN ALL THE MEMBERS IF THERE IS EVEN JUST ONE MEMEBER
                                WITH HIGH SPECIFITY
                L>not(): represents any element that is not represented by its argument.
                L>where(): same as last but easily overriden, less specifity
                L>has(): element if any of the relative selectors match when anchored against the attached element.

    pseudo-elements(THEY USE "::): act like you have added a new html element

            MANDATORY TO HAVE CONTENT EVEN IF "", OTHERWISE WONT BE GENERATED AND STYLES WONT APPLY


            ex: before, after, first-line, first-letter, selection, placeholder, marker, backdrop, aprt, sloted

            L> after:  last child of the selected element, inline, usuallly used with content
            L>before: same but before
            L> backdrop: used to style the backdrop of an element,
                         for dialog and fullscreen elements when active
            L> cue: for track elements within video and audio, subtitles or captions
            L> cue():  retrieve the current cue or text track information 

            L> file-selector-button: button of input or type file
            L>first-letter: first letter, first line
            L> first-line: first line
            L>grammar-error:  text segment which the user agent has flagged as grammatically incorrect.
            L> hightlight(): styles to costum highlight
            L> marker: ALREADY DEFINED BELLOW
            L> part(): any element within a shadow tree that has a matching part attribute.
            L> placeholder

            L> selection: art of a document that has been highlighted by the user 
            L> slotted(): element that has been placed into a slot inside an HTML template
            L>spelling-error
            L>target-text: text that has been scrolled to if the browser supports text fragments
            L>view-transition: contains all view transition snapshot groups and sits over the top of all other page content.
            L> view-transition-image-pair(): "old" and "new" view states 
            L>view-transition-group():  single view transition snapshot group.
            L>view-transition-new(): AFTER TRANSITION
            L>view-transition-old()



NOTE:
    EX: .card img[alt] selecting the imgs with the alt ATTRIBUTTE



-----------------------------------
SHORTCUTS:
    -p*5>lorem20 - 5 paragraphs the lorem text with 20 words
    .name -> div with class name
    #name -> div with Identifier
    I can type anything like p, link etc if i tab they will appear

    .block.right -> creates a div with 2 classes ("block right")

    .name*12: creates 12 divs with name class


--------------------------------------
FORM ELEMENTS DO NOT INHERIT!!!! -> button, input etc

html: to add costum attributes that dont affect presentation or functionality: data- (can be used with javascript)

html: input- required: is used to indicate that an input field must be filled out before submitting a form. 
    pattern: to force an input to have a certain pattern


-Hero section, part of the page with a big image or attention getter

- /#menu, takes me to the home page, to the menu section


----------------------------------------------
MEDIA QUERIES:
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />// THIS PART OF HTML NECESSARY
    
    styles before still applied, unless overriden

    I CAN GO TO INSPECT PAGE AND CLICK ON THE TOGGLE DEVICE TOOL TO SEE IT AS A MOBILE

    sintax:
    @media media type and (condition: breakout){
        //CSS RULES
    }

    MEDIA TYPE - general category of a device(optional, all is implied, unless we use only)
        L> all- for all devices
        L> print - for documents to be seen in print mode
        L> screen
        L> speech: screen readers

    CONDITION:
        L> typical min-width
        L> can stack conditions with and
        L> orientation:
            L> landscape: width greater than height, horizontal phone
            L> portait: inverse
        L> resolution:
            L> min or max
        L> aspect-ratio: ratio between width and height
            L> min/max
        L> color :Number of bits per color component
            L> min/max
        L> pointer:
            L> none - no pointing device like mouse
            L> coarse - pointing device limited accuracy(like touchscreen)
            L> fine - high accuracy - like mouse

        L> hover  
            L> none- pointing device cannot hover
            L> hover

        L> light level: user environment is
            L> dim - dark
            L> normal - moderate
            L> washed - bright

        L>prefers-reduced-motion:
            L> no preference
            L> reduce

        L> display-mode:
            L> fullscreen
            L> standalone 
            L> minimal-ui 
            L> browser

        L> prefers-color-scheme: dark or light mode

------------------------------------------------
VARIABLES:

    to add css variables, add a :root pseudo-class, eveything inherits from it
    syntax:

    :root{
        --VARIABLE: ...
    }

    then to add the the general css

    var(--VARIABLE)

    redifining:
    I can do --variable: changed; inside a specific class, and it only applies to that class

-------------------------------------------------


DOM(document object model)

 API that represents and interacts with any HTML or XML-based markup language document. ç


 DOM is a document model loaded in the browser and representing the document as a node tree
        , or DOM tree, where each node represents part of the document
         (e.g. an element, text string, or comment).


--------------------------------------------------

ADJACENT SIBLING-  element that is immediately next to another
             element in the DOM (Document Object Model) tree, sharing the same parent.

    L> combinator (+) is used to select the element that comes directly after a specified element.

    ex: h1 + p {
  color: blue;  //In this example, any <p> element 
                    that immediately follows an <h1> element will be styled with blue text.
}


/*example: article + article, of 3 articles only 
    selects the last 2 because the first doesnt have any article behind it*/


SELECT ALL SIBLINGS, same but with ~


CHILD COMBINATOR:
    .nav__menu > .nav__item:first-child: This targets the first child element with the class
         .nav__item that is a direct child of an element with the class .nav__menu.


-------------------------------------
HAS: see example from the article above

now I can use article:has(+article): and it will select the first two, sees the next one
article + article, of 3 articles only //selects the first 2

/*will select only what that article has in bold*/
article:has(span) .bold {
  color: red;
}