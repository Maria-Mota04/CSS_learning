COLORS: -> I can move the top bar, to choose form rgba,hsl ,#,  and the right bar for the alpha parameter = transparency

    background-color: changes the whole background color, #six digits, rgba(0,0,0,transparent = 0), rgb(NOT INHERITED)
    color: font color, #RRGGBB, first two red etc, if R=R, G=G, B=B, #FF0000 = #F00(NOT INHERITED)
    L> I can also have hsl(hue saturation lightness) and hsla (100% = white), hue = which color it is(color wheel from 0 to 360), 
        saturation = intensity of the color I have(between full color and grey), lightness = how light or dark



FONT:(EVERYTHING INHERITED)

    font-weight: boldness
        L> normal, bold, lighter, bolder, [1,1000](default is 400)

    font-style: italic, oblique(stronger italic)(optional xdeg), normal

    font-family:prioritized list of one or more font family names
        It can have a family name and a generic family name or just the generic
        L> main ones-> serif(default in papers), sans-serif(default in web), monospace,
        |                    cursive, fantasy(really bold) -> usually used as fallbacks
        |
        (if the name has a space it need '')
        L> I can also load from google fonts -> You can put a link(top of html) or an import(copy without
        the script and add to css)

    font-size (always use rems, remember forms wont inherit)
    text-transform: how to capitalize an element's text(INHERITED)

    Opacity: degree to which content behind an element is hidden
   


TEXT:

    text-decoration: sets the appearance of decorative lines on text (NOT INHERITED)
        L> line(underline, line-through,...), color, style(solid,wavy,dashed...), thickness
        L> none to remove, usefull for links

    text-transform: specifies how to capitalize an element's text. (INHERTED)
        L> none, capitalize(first letter of each word upper), uppercase, lowercase,
         full_width(chinese, japanese, cause characters take more space),
          full-size-kana( all small Kana characters to the equivalent full-size Kana)

    text-align: sets the horizontal alignment of the inline-level content inside a block element or table-cell box. (INHERITED)
        L> works like vertical align but in horizontal
        L> start == left, end == right, left, right, center, justify,
         justify-all(same as justify but forces the last line to justify), match-parent -> assuming direction: ltr;

    text-indent: (GOOD FOR EM): indents the first line (INHERITED)

    line-height: number | length | percentage | normal, distance between lines (INHERITED)
        L> default 1.2

    letter-spacing: spacing between text-chars (INHERITED)
        L> px, rem, normal...
    
    word-spacing: same as last, but for words (INHERITED)

    white-space: how white space inside an element is handled.(INHERITED)
        L> normal(multiple spaces collapsed, same as newlines, text make to fill the box), 
            nowrap(same but no newlines), pre(newline and spaces preserved, text wont wrap, it can overflow, good for poems),
            pre-wrap(same as pre, but will break lines to fill boxes, unless its spaces),
            pre-line(same as pre-wraped but collapses sequences of white spaces),
            break-spaces(SIMILAR TO PRE-WRAP,preserves whitespaces, wraps, can break spaces if needed to fill box)




AROUND LINE:

    border: width, style, color EX:  thick double #32a1ce; there are also sides like the bellow ones (NOT INHERITED)
    outline: width, style, color EX: 3px solid green; -> DONT TAKE UP SPACE INSIDE, GOES OUTSIDE,!= BORDER(NOT INHERITED)
        L> I can also have an outline - offset, that gives me a distance of the line from our box,
        I can use negative values to get inside the box




AROUND SPACE:


    padding: top, right, bottom, left == top bottom, left right == top, right left, bottom; if its a percentage -> relative to inline size 
    L> creates extra space within an element.(NOT INHERITED)
    margin: same as padding -> Margins create extra space around an element != padding (NOT INHERITED)
    margin-inline - > only applies to left and right (there exists margin collapsin when 2 margins overlap)

    NOTE -> DOING MARGIN: x px AUTO, the auto centers the box




LISTS -> I can add to the html start(to start the count at a certain number), reversed(to count down),




    ORDERED LIST:
        list-style-type:  sets the marker (INHERITED)
            L> disc, circle, square...., "-",  custom-counter-style(Identifier matching an @counter-style rule )
                none

        list-style: allows you to set all the list style properties at once.(INHERITED)
            L> image, position, type

        list-style-position: sets the position of the ::marker relative to a list item.
            L> inside(indented and the marker is inside, if I add padding the markers will move with it),
             outside (same level and the marker is ouside)
            L> List 1                   List 2
                -List Item 1-1      vs -List Item 2-1

            L> if I move the text and i want the bullet points to move i should change it to inside






MULTI:

    background: color, image, origin, size, repeat-method, attachment, clip, position

SIZE:
    box-sizing: sets how the total width and height of an element is calculated
                1- content-box -  default, is i say box = 100px, it will add border and padding, so it will be bigger   
                2- border-box - best one, if i say box = 100px, it will account the border and padding (use in css reset)
                    L> doesnt include margin cause that is outside or outline


CURSOR
    changes the way the mouse appears when we hover
    L> auto; pointer; zoom-out;    url(hand.cur), pointer;     url(cursor_1.png) 4 12,auto;
        url(cursor_2.png) 2 2,pointer; ...

    L>cursor property is specified as zero or more <url> values, separated by commas, 
    followed by a single mandatory keyword value. Each <url> should point to an image file. 

    Parameters:
    L> URL - more than one url ->provided as fallbacks, in case some cursor image types are not supported.

    L>coordinates -  relate to the top-left corner of the image - cursor's hotspot

    L> Keys(mandatory)
        L> general - auto(automatic), default(normal cursor), none
        L> links - context-menu, help, pointer, progress, wait
        L> selection - cell, crosshair, text, vertical-text
        L> ...


CONTENT(NOT INHERITED)
    insert text, symbol, image without altering html- usually for pseudo-elements

    p::before {content: "â˜… ";} -> inserts before every paragraph the start
    p::after -> this is after
    p{...} -> replaces p for what I put in content

    content: none ->hides the pseudo-element, 
    content: normal-> allows the pseudo-element to be generated but doesnt display anything(reset)

    content: linear-gradient- to add it to the pseudo-element
    background: image-set( url("image1x.png") 1x, url("image2x.png") 2x); /* Different images for different pixel densities, different resolutions */
    ....





DISPLAY:(NOT INHERITED)

    FOR THE ELEMENT:

        BLOCK - > 100% width default, and stack ontop of eachother(newline), and default margin
                    can control the overflow if the element exceeds overflow: visible/hidden/scroll/auto
                    can contain block and inline elements, respect margin, padding and border
                    (ex: p, div, h1, ul, ol, section, article, header, footer, form)

        INLINE - > only as much width as necessary, dont start newlines,
                container only other inline elements or text, DO NOT RESPECT WIDTH, HEIGHT,
                MARGIN-TOP, MARGIN-BOTTOM, PADDING-TOP, PADDING-BOTTOM
                ----> THEY TAKE THE SPACE THEY NEED, bu respect horizontal margin and padding.
                vertical align can be controlled with vertical-align.
                respect whitespaces
                (ex: span, a, em, strong, img, input, label, code, abbr, cite, q)
                

        INLINE-BLOCK -> similar to inline, no newline, width as needed, vertical align can be controlled 
                        with vertical-align, respect whitespaces
                    -> similar to block, respects width and height, respect padding and margins, 
                    can contain block and inline
                    (ex: img, input, button, label )
                    (ex: can be made inline-block: span, a, div, li)

                    USEFUL - turning link into a button and turning a list into a row

        NONE -> items disappear, removes from the document flow (bad)


        EXTRAS:
            FLOW-ROOT: creates a new block-formatting context, 
            isolates the elements from floats or margin collapsing. (preventing floated children escaping parents container)

            CONTENTS:

            BLOCK FLOW-ROOT: block level element + new formatting context
            (preventing floated children escaping parents container)

            INLINE FLOW-ROOT: same but inline

            INLINE-FLEX: will behave like inline, but children will be FLEX

            INLINE-GRID: same but with GRID

            TABLE: element as block level container -  to simulate a table

            TABLE-ROW: element like a row in a table

            LIST-ITEM: to behave like a list item, for fake lists




    FOR THE CHILDREN:
        
        FLOW_LAYOUT ->

        GRID ->

        FLEX ->



FLOAT:(NOT INHERITED)

    L> The element is removed from the normal flow of the page SO IF I APPLY MARGIN TO OTHER CONTENT IT wont
            AFFECT THE FLOATED ITEM(i should add margin to the actual block)
    L> still remaining a part of the flow

    L> places an element on the left or right side of its container,
    L> allowing text and inline elements to wrap around it. (TEXT WRAPPING)

    L> floating elements behave like blocks in layout.

    L> IF I DONT WANT OTHER CONTENT WRAPPING AROUND,
        if I have a container around it:
            I can display: flow-root(in the container I have behind it), so the container wont shrink
        
        Otherwise do: clear:both as a separate class and add it to what I want






TRANSITION(NOT INHERITED)

    L> property(which property should be animated, can be any property, even transform),
     duration(how long it lasts),
    timing-function(speed of the curve),
     delay(delay before it starts), 
     behaviour

     L> YOU PUT TRANSITION IN THE NORMAL ELEMENT, THE PSEUDO CLASS HAS THE AFTER VALUE

TRANSFORM(NOT INHERITED)
    L>lets you rotate, scale, skew, or translate an element. Modifies the coordinate space.
    L> takes one or mor transform func or none


JS 

    if I have .menu.is-active, I can build a js function that activates the .menu and gets those styles








GLOBAL VALUES: ex

    outline: inherit; -> inherits from the parent
    outline: initial; -> resets to the initial/default value, usually none
    outline: revert; -> reverts the value of a property to what it would have been if the current stylesheet (or the current layer) didn't apply.
    outline: revert-layer; -> r essentially ignores the current cascade layer (e.g., the author stylesheet) and reverts the property to its value from the previous cascade layer.
    outline: unset; ->  Acts as inherit if the property is inheritable, otherwise acts as initial.




--------------------------------------------

UNITS FOR MEASUREMENTS:

ABSOLUTE: pixels = px -> not recomended because its static for fonts, but for borders for example is good

RELATIVE:
    - percentage: usually related to the parents size

    - REM: usually for fontsize, related to the root element

    - EM: looks for the main element, the parent for fontsize, but for padding, margin it looks for the fontsize
        SO IT LOOKS FOR THE NEAREST FONT-SIZE AND USES THAT AS REFERENCE
        -> not recomended for font, but yes for the padding, margin, button etc because it uses the element iself as reference

    -CH- character - helps determine character width - based on the character '0's width

    -VW,WH- viewport width and height - % is usually better than vw
        - vh is good to make the body element bigger without adding elements, using min-height = 100vh




-----------------------------------------
USER STYLE SHEETS

Summary

    Browser Default Styles: Basic styles applied by the browser.

    User Stylesheets: Custom styles applied by the user to override site styles.

    Author Stylesheets: Styles provided by the website developer (external, internal, and inline).

    User-Agent Stylesheets: Special fallback styles applied by the browser.

The cascade in CSS determines how these styles interact, with inline styles typically having the most power, followed by author styles, user styles, and finally browser default styles.


-------------------------------
CSS RESET- always reset

    *{
        margin: 0;
        padding: 0;
        border: 0;
        font-size: 100%;
        font: inherit;
        vertical-align: baseline;
    }

    Consistency: Browsers apply their own default styles, which can vary. A reset helps standardize element appearance across different browsers.

    Simplify Styling: By removing default browser styles, you can more easily control the look and feel of your web page.

    Reduce Bugs: Minimizes styling issues caused by inconsistent default browser styles.

    CSS Reset: A method to remove default browser styles for consistency and ease of styling.


-------------------------------------------
PSEUDO CLASSES - keyword added to a selector that specifies a special state of the selected element(s). 



    :nth-child(2) -> for lists, selects a buller point

    a:hover,
    a:focus-> together for people that cant selection

    a:active -> when I click

    a:visited 


    ---> ::MARKER-  selects the marker box of a list item, which typically contains a bullet or number. 
                L> fonts, white-space, color, text-combine-upright, unicode-bidi, direction, content,
                    animation, transition




-----------------------------------
SHORTCUTS:
    -p*5>lorem20 - 5 paragraphs the lorem text with 20 words
    .name -> div with class name
    #name -> div with Identifier
    I can type anything like p, link etc if i tab they will appear

    .block.right -> creates a div with 2 classes ("block right")